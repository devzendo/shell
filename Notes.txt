command [arg1 .. argN]

command1 [args] | command2 [args]               < iterator piping

  first command receives empty-iterator, commands in the middle of the
  pipeline receive their previous command's output iterator, command at the
  end receives a stdout-output-iterator. each command is executed using a
  shellplugin-command-execution-command which looks through the PluginRegistry
  for methods to execute

command "quotes bind | a string"                < quoting

some internal commands and syntactic sugar

command [args] > variable
variable = command [args]
variable = command1 [args] | command2 [args] | ... | commandN [args]
  same as command [args] | varstore variable
  input iterator to varstore is stored as variable in the variable store.
  output iterator to varstore is null-iterator, which ignores all input.
  (haven't implemented varstore yet)

  Can't do var = command > var, as this is ambiguous.

args:
  numbers
  strings
  variable references
  switches

variable = [args]
[args] > variable
  the literal arguments are stored in the variable

[args]
  the literal arguments are emitted on the output pipe

                                              _ buffer-it2 stored in foo var
execution mechanics:                         /
      command1      command2     varstore foo
     /        \    /       \     /          \
empty-it     buffer-it1   buffer-it2        null-it


Scope control
The outermost level is the global scope. Each new { ... } block gets a new
scope, which can have definitions created and used within it. This is
destructed when all commands in the block end. New scopes chain from their
parent; all defns in the chain up to the parent can be seen.

command0 | { command1 | command2 } | { command3       } |   command4
^          ^                     ^    ^               ^      ^
global     scope1>global         |    scope2>global  |      global
                           s1 destructor             |
                                                   s2 destructor

command0 | {        { command1 } }
^          ^        ^
global     |        |
      scope1>global |
                scope2>scope1>global

So, lookups by command1 will first search scope2, then scope1, then global.

command { /* block */ } | { command | command } |

Rough ideas
findFiles -Under /tmp -SuchThat { (_.absolutePath =~ /foo/) && (_.size > 1024MB) }
_ is aliased to refer to the iterator. The block is called foreach file found.

Grammar
funcdef ::= 'def' functionname '(' [argname [':' typename] [',' argname [':' typename]]*] ')' [':' return-typename]
(statement | block)

block ::= '{' statement* '}'

statement ::= funcdef | pipeline | literalassignment | impliciteval

pipeline ::= [variablename '='] command ['<' variablename] ['|' command]* ['>' variablename]

literalassignment ::= [variablename '='] argument [argument] ['>' variablename]

impliciteval ::= argument [argument]

command ::= prefix-function | prefix-command | infix-command

prefix-command ::= commandname argument*
prefix-function ::= commandname '(' [argument [',' argument]*] ')'
infix-command ::= argument1 commandname argument*

x = x + 1 // pipeline with infix-command + and args x, 1
x = (3 + x) * 5 // pipeline *(+(3, x), 5)
x = ((2 * 3) + (y / 7)) // +(*(2, 3), /(y, 7))
x = 1 + 2 + 3 // parse error - must use parentheses

argument ::=
  '(' command ')' |     // parenthesis handling e.g. (3 + 5)
  true | false |
  -Switch |
  wholeIntegerNumber |
  floatingPointNumber |
  '"' string literal '"' |
  variableName |
  block

Core commands
The 'eval' command takes args and pushes to the output pipe.
New - creates an object:
  new classname argument*
  new '(' classname [, argument [',' argument]*] ')'
  classname new argument*

  e.g.
  new java.io.File "/tmp"
  new(java.io.File, "/tmp")
  java.io.File new "/tmp"

Var - creates an optionally typed variable

External commands
Args are passed verbatim (-Switch is not tokenised as a switch); variables are expanded;
Only postfix-external-command makes sense: you wouldn't call an external command in an infix or functional style.
Need to register the set of external commands
external touch /usr/bin/touch
external -scan /usr/bin
external -scan -path  // scans all the directories in $PATH

Should be able to run a command directly, without special fu - just as another shell. Everything after the command
is passed verbatim.

Need to control/sense:
  Standard output of external command is converted to Strings, and goes output pipe (or redirected to a variable).
  Input pipe goes to standard input of external command.
  Standard error should be redirectable (with "2> variable", or "2| command " ?)
  Run in background with & ? Need to introduce job control..
  Obtain exit code.
  Variable expansion (in the PluginHelper expand... functions)

Extra semantics needed:
  Blocks executed lazily for 'if' and short-circuiting (by-name parameters)
