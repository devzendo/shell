22/07/2016
Deadlock fixed; inspect was crashing - haven't yet fixed why the multiple thread pipeline execution deadlocked though,
looks like filterRegex blocked trying to push into the RendezvousPipe that inspect would no longer be reading from
since it crashed. Perhaps on crash, a CommandHandler should set the input pipe to /dev/null, and interrupt any reading
thread (unblockiing filterRegex and draining it).

But why does a crash (specifically the plugin causing a runtime error (index out of bounds) that gets translated over
the reflective invoke call to an InvocationTargetException, which is translated into a CommandExecutionException)
trigger the deadlock, but normal execution doesn't?

Perhaps a 'head N' plugin (that only passes the first N entries on its input pipe onto its output pipe) would exhibit
the same behaviour when fed with say a range of 1 to 10?


19/07/2016
Was trying to do a regex search through a text file with
cat "testfile" | filterRegex "^.*(.*ing).*$" | inspect
but this either deadlocked, or threw a 'multiple commands failed' exception.
The deadlock showed cat: No thread is calling next() when the RendezvousPipe is terminated.


18/07/2016
Removed function style, and added parenthesised literals, to get round the weird cases of issue 3.

14/07/2016

] var = 45 * 3
] 1 2 3 > foo
] bar=3
] listVariables
SHELL_VERSION=List(0.0.1-SNAPSHOT)
var=List(135)
foo=List(List(1, 2, 3))
bar=List(List(3))


Hmmm..


14/07/2016
In order to better validate variable assignments, added a semantic analyser. This currently just checks that
variables don't have the same name as commands. This was proving impossible to do lexically (other parts of the
grammar were blowing up when I validated existence of variables in the variable partial function), so allow
lexically-valid but semantically-invalid statements out of the parser, and then validate them semantically.

Added more debugging to the parser.

Parser enhancements:

1) Literal assignment: added the ability to assign literals to variables without any actual commands. Many literals can
   be added as a list to a variable, and echoing the syntax of pipelines, there are two forms:
      3 4 5 > variable
      variable = "hello" "is" "it" "me"
   (there is still work to do on this, see below)

2) Implicit eval: added the ability to mention literals directly with no variable assignment or command, and have them
   output:
   "hello" 1 2 3
   # List("hello", 1, 2, 3)

Literal assignment and implicit eval both use the 'eval' command, which takes its arguments, and puts them into its
output pipe. Literal assignment just attaches the named variable to the end of that pipe.


05/07/2016
Picked up again. Split this diary out of Notes.txt.


10/07/2013
Current status: project paused. I want to add an 'implicit eval command', so you
can say x = 4. There's no command involved here, just an assignment of a literal.
However, before I can add this, I need to change the variable reference detector
in the parser to use a partial function that checks for variable reference
existence. This is since when adding eval, the pipeline 'foo' (where foo does
not exist as a command; see the test commandThatIsNotDefined) gets parsed as
'eval <variable reference foo>', which is wrong - it is an unknown command.

Adding this partial function is possible, but how does it know the current
scope? Global is easy, but how can it know that it has to use a variable registry
in the eval command 'x = { z = 5; 2 + z }' (to know where to find z)?


Also, although the language has progressed to almost the point of being useful,
it's pretty hairy, with a few cases that make me wonder whether it is /too weird/,
e.g.
  if false { echo "it is false" }
... works fine, one 'if' command with 'false' as its conditional, and the block as
its 'then block'.

However:
  if (false) { echo "it is false" }
... is parsed as two commands - an 'if' with 'false' as conditional and no
blocks (which is useless, but catered for), and a block pipeline that echoes.
WTF?
The reason this happens is that the parens around the 'false' make the parser
see the call to 'if' as a function, and the block is not inside those parens,
and so the 'if' only has 'false' as its only arg.

So, I tell users, don't put parens around literals. But if you want to use an
expression as the conditional [ (x || y) say ], then you have to.
if (x || y} { echo "truth" } works fine, if x or y are true.
